#!/bin/bash
#############################################################################
#  Copyright (C) 2016
#  
#  Hamster is free software; you can redistribute it and/or modify it
#  under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#  
#  Hamster is distributed in the hope that it will be useful, but
#  WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#  General Public License for more details.
#  
#  You should have received a copy of the GNU General Public License
#  along with Hamster.  If not, see <http://www.gnu.org/licenses/>.
#############################################################################
source ${HAMSTER_SCRIPTS_HOME}/util/hamster-io

__Hamster_check_is_enabled () {
    local projectnametocheck=$1
    shift
    local projectnameneededfor=$2
    shift
    local extramsg=$@
    local uppercaseprojectnametocheck=`echo ${projectnametocheck} | tr '[:lower:]' '[:upper:]'`
    local varnametocheck="${uppercaseprojectnametocheck}_SETUP"

    if [ "${!varnametocheck}" != "yes" ]
    then
        echo "${projectnameneededfor} requires ${projectnametocheck} to be setup, set ${varnametocheck} to yes"
        if [ "${extramsg}X" != "X" ]
        then
            echo "${extramsg}"
        fi
        exit 1
    fi
}

__Hamster_check_dependencies_not_setuponly () {
    local projectnametocheck=$1
    local projectnameneededfor=$2
    local uppercaseprojectnametocheck=`echo ${projectnametocheck} | tr '[:lower:]' '[:upper:]'`
    local modevarnametocheck="${uppercaseprojectnametocheck}_MODE"
    local lowercaseprojectnameneededfor=`echo ${projectnameneededfor} | tr '[:upper:]' '[:lower:]'`
    local uppercaseprojectnameneededfor=`echo ${projectnameneededfor} | tr '[:lower:]' '[:upper:]'`
    local modevarnameneededfor="${uppercaseprojectnameneededfor}_MODE"

    if [ "${HAMSTER_JOB_TYPE}" == "${lowercaseprojectnameneededfor}" ] && [ "${!modevarnameneededfor}" != "setuponly" ]
    then
        if [ "${!modevarnametocheck}" == "setuponly" ]
        then
            echo "Cannot run/setup ${projectnameneededfor} if ${projectnametocheck} mode is setuponly"
            exit 1
        fi
    fi
}

__Hamster_check_if_set_is_yes_or_no () {
    local varname="$1"

    if [ "${!varname}X" != "X" ] \
        && ( [ "${!varname}" != "yes" ] && [ "${!varname}" != "no" ] )
    then
        echo "${varname} must be set to yes or no"
        exit 1
    else
        Hamster_print ${varname}
    fi
}

__Hamster_check_if_set_is_true_or_false () {
    local varname="$1"

    if [ "${!varname}X" != "X" ] \
        && ( [ "${!varname}" != "true" ] && [ "${!varname}" != "false" ] )
    then
        echo "${varname} must be set to true or false"
        exit 1
    else
        Hamster_print ${varname}
    fi
}

__Hamster_check_environment_variable_must_be_set () {
    local varname="$1"

    if [ "${!varname}X" == "X" ]
    then
        echo "${varname} environment variable must be set"
        exit 1
    else
        Hamster_print ${varname}
    fi
}

__Hamster_check_must_be_set () {
    local varname="$1"
    local extramsg="$2"
    
    if [ "${!varname}X" == "X" ]
    then
        echo "${varname} must be set ${extramsg}"
        exit 1
    else
        Hamster_print ${varname}
    fi
}

__Hamster_check_if_set_is_a_directory () {
    local varname="$1"

    if [ "${!varname}X" != "X" ] && [ ! -d ${!varname} ]
    then
        echo "${varname} does not point to a directory"
        exit 1
    else
        Hamster_print ${varname}
    fi
}

__Hamster_check_if_set_is_regular_file () {
    local varname="$1"

    if [ "${!varname}X" != "X" ] && [ ! -f ${!varname} ]
    then
        echo "${varname} does not point to a regular file"
        exit 1
    fi
}

__Hamster_check_is_executable () {
    local varname="$1"

    if [ ! -x ${!varname} ]
    then
        echo "${varname}=\"${!varname}\" does not have execute permissions"
        exit 1
    else
        Hamster_print ${varname}
    fi
}

__Hamster_check_must_be_set_and_is_directory () {
    local varname="$1"
    local extramsg="$2"
    
    __Hamster_check_must_be_set "${varname}" "${extramsg}"
    __Hamster_check_if_set_is_a_directory "${varname}"
}

__Hamster_check_must_be_set_and_is_regular_file () {
    local varname="$1"
    local extramsg="$2"
    
    __Hamster_check_must_be_set "${varname}" "${extramsg}"
    __Hamster_check_if_set_is_regular_file "${varname}"
}

__Hamster_check_must_be_set_and_is_executable () {
    local varname="$1"
    local extramsg="$2"

    __Hamster_check_must_be_set "${varname}" "${extramsg}"
    __Hamster_check_is_executable "${varname}"
}
    
#
# Check Core Inputs
#

__Hamster_check_must_be_set "HAMSTER_SUBMISSION_TYPE"

if [ "${HAMSTER_SUBMISSION_TYPE}" != "sbatchsrun" ]
then
    echo "HAMSTER_SUBMISSION_TYPE environment variable must be set to sbatchsrun"
    exit 1
fi

if [ "${HAMSTER_SUBMISSION_TYPE}" == "sbatchsrun" ]
then
    __Hamster_check_environment_variable_must_be_set "SLURM_NODEID"
    __Hamster_check_environment_variable_must_be_set "SLURM_NNODES"
    __Hamster_check_environment_variable_must_be_set "SLURM_JOB_NODELIST"
    __Hamster_check_environment_variable_must_be_set "SLURM_JOB_NAME"
    __Hamster_check_environment_variable_must_be_set "SLURM_JOB_ID"
fi

#
# Check Hamster Inputs
#

__Hamster_check_must_be_set_and_is_directory "HAMSTER_SCRIPTS_HOME"

source ${HAMSTER_SCRIPTS_HOME}/lib/exports/hamster-exports-submission-type
source ${HAMSTER_SCRIPTS_HOME}/lib/hamster-lib-hadoop-helper
source ${HAMSTER_SCRIPTS_HOME}/lib/hamster-lib-calculate-values
source ${HAMSTER_SCRIPTS_HOME}/lib/hamster-lib-helper

if [ "${HAMSTER_TIMELIMIT_MINUTES}X" == "X" ]
then
    echo "HAMSTER_TIMELIMIT_MINUTES environment variable could not be calculated"
    exit 1
fi

__Hamster_check_must_be_set "HAMSTER_LOCAL_DIR"

__Hamster_check_if_set_is_yes_or_no "HAMSTER_NO_LOCAL_DIR"

__Hamster_check_must_be_set "HAMSTER_JOB_TYPE"

if [ "${HAMSTER_JOB_TYPE}" != "hadoop" ] \
    && [ "${HAMSTER_JOB_TYPE}" != "testall" ] \
    && [ "${HAMSTER_JOB_TYPE}" != "script" ] \
    && [ "${HAMSTER_JOB_TYPE}" != "interactive" ]
then
    echo "HAMSTER_JOB_TYPE must be set to hadoop, testall, script, or interactive"
    exit 1
fi

if [ "${HAMSTER_JOB_TYPE}" == "script" ]
then
    __Hamster_check_must_be_set_and_is_executable "HAMSTER_SCRIPT_PATH" "for HAMSTER_JOB_TYPE = ${HAMSTER_JOB_TYPE}"
fi

hamsterstartupshutdowntime=`expr ${hamster_startup_time_value} + ${hamster_shutdown_time_value}`

if [ ${HAMSTER_TIMELIMIT_MINUTES} -le ${hamsterstartupshutdowntime} ]
then
    echo "timelimit must be atleast the sum of HAMSTER_STARTUP_TIME & HAMSTER_SHUTDOWN_TIME"
    exit 1
fi

if [ "${HAMSTER_PRE_JOB_RUN}X" != "X" ]
then 
    __Hamster_check_is_executable "HAMSTER_PRE_JOB_RUN"

    if [ ${hamster_startup_time_value} -lt 5 ]
    then
        echo "HAMSTER_STARTUP_TIME must be >= 5 minutes if HAMSTER_PRE_JOB_RUN is set"
        exit 1
    fi
fi

if [ "${HAMSTER_POST_JOB_RUN}X" != "X" ]
then 
    __Hamster_check_is_executable "HAMSTER_POST_JOB_RUN"
    
    if [ ${hamster_shutdown_time_value} -lt 10 ]
    then
        echo "HAMSTER_SHUTDOWN_TIME must be >= 10 minutes if HAMSTER_POST_JOB_RUN is set"
        exit 1
    fi
fi

#
# Check General Inputs
#

__Hamster_check_if_set_is_a_directory "JAVA_HOME"

nodecount=${HAMSTER_NODE_COUNT}

# nodecountmaster is a counter to count the master only once
nodecountmaster=1

hamsterprojects="HADOOP"

for project in ${hamsterprojects}
do
    setupvar="${project}_SETUP"
    __Hamster_check_if_set_is_yes_or_no ${setupvar}
done

# Did user turn on SOMETHING to run
#
# Pig is not "something", b/c it runs on top of hadoop 
# Mahout is not "something", b/c it runs on top of hadoop 

if [ "${HADOOP_SETUP}" != "yes" ]
then
    echo "There is nothing to setup"
    exit 1
fi

# Did user turn on something matching job run type

hamsterprojects="HADOOP"

for project in ${hamsterprojects}
do
    projectlowercase=`echo ${project} | tr '[:upper:]' '[:lower:]'`
    setupvar="${project}_SETUP"

    if [ "${HAMSTER_JOB_TYPE}" == "${projectlowercase}" ] \
        && [ "${!setupvar}" != "yes" ]
    then
        echo "Cannot run ${projectlowercase} job type if ${setupvar} is not enabled"
        exit 1
    fi
done

if [ "${HAMSTER_JOB_TYPE}" == "testall" ] \
    && [ "${HADOOP_SETUP}" != "yes" ]
then
    echo "Cannot run testall job type, nothing is enabled to be setup"
    exit 1
fi

#
# Check Hadoop Inputs 
#

if [ "${HADOOP_SETUP}" == "yes" ]
then
# Subtract 1 for Hadoop Master
    nodecount=`expr ${nodecount} - ${nodecountmaster}`
    nodecountmaster=0

    __Hamster_check_must_be_set "JAVA_HOME" "for Hadoop" 

    __Hamster_check_must_be_set "HADOOP_VERSION" "to run Hadoop"

    __Hamster_check_must_be_set_and_is_directory "HADOOP_HOME" "to run Hadoop"

    __Hamster_check_must_be_set "HADOOP_LOCAL_DIR" "to run Hadoop"

    if [ "${HADOOP_SETUP_TYPE}" != "MR1" ] \
        && [ "${HADOOP_SETUP_TYPE}" != "MR2" ] \
        && [ "${HADOOP_SETUP_TYPE}" != "HDFS1" ] \
        && [ "${HADOOP_SETUP_TYPE}" != "HDFS2" ]
    then
        echo "HADOOP_SETUP_TYPE must be set to MR1 or MR2 or HDFS1 or HDFS2"
        exit 1
    fi

    if [ "${HADOOP_MODE}" != "terasort" ] \
        && [ "${HADOOP_MODE}" != "script" ] \
        && [ "${HADOOP_MODE}" != "interactive" ] \
        && [ "${HADOOP_MODE}" != "upgradehdfs" ] \
        && [ "${HADOOP_MODE}" != "decommissionhdfsnodes" ] \
        && [ "${HADOOP_MODE}" != "launch" ] \
        && [ "${HADOOP_MODE}" != "setuponly" ] \
        && [ "${HADOOP_MODE}" != "hdfsonly" ]
    then
        echo "HADOOP_MODE must be set to terasort, script, interactive, upgradehdfs, decommissionhdfsnodes, launch, setuponly, or hdfsonly"
        exit 1
    fi

    if ([ "${HADOOP_SETUP_TYPE}" == "HDFS1" ] || [ "${HADOOP_SETUP_TYPE}" == "HDFS2" ]) \
        && [ "${HAMSTER_JOB_TYPE}" == "hadoop" ] \
        && [ "${HADOOP_MODE}" == "terasort" ]
    then
        echo "HADOOP_SETUP_TYPE must be set to MR1 or MR2 for HADOOP_MODE = ${HADOOP_MODE}"
        exit 1
    fi

    if [ "${HAMSTER_JOB_TYPE}" == "hadoop" ] && [ "${HADOOP_MODE}" == "script" ]
    then
        __Hamster_check_must_be_set_and_is_executable "HADOOP_SCRIPT_PATH" "for HADOOP_MODE = ${HADOOP_MODE}"
    fi

    if [ "${HAMSTER_JOB_TYPE}" == "hadoop" ] && [ "${HADOOP_MODE}" == "upgradehdfs" ]
    then
        if [ "${HADOOP_SETUP_TYPE}" != "MR2" ] && [ "${HADOOP_SETUP_TYPE}" != "HDFS2" ]
        then
            echo "HADOOP_SETUP_TYPE must be set to MR2 or HDFS2 for HADOOP_MODE of ${HADOOP_MODE}"
            exit 1
        fi

        # Returns 0 for ==, 1 for $1 > $2, 2 for $1 < $2
        Hamster_vercomp ${HADOOP_VERSION} "2.2.0"
        if [ $? == "2" ]
        then 
            echo "HADOOP_MODE of ${HADOOP_MODE} only supported in Hadoop 2.2.0 and more recent versions"
            exit 1
        fi
    fi

    if [ "${HAMSTER_JOB_TYPE}" == "hadoop" ] && [ "${HADOOP_MODE}" == "decommissionhdfsnodes" ]
    then
        if [ "${HADOOP_SETUP_TYPE}" != "MR2" ] && [ "${HADOOP_SETUP_TYPE}" != "HDFS2" ]
        then
            echo "HADOOP_SETUP_TYPE must be set to MR2 or HDFS2 for HADOOP_MODE of ${HADOOP_MODE}"
            exit 1
        fi

        # Returns 0 for ==, 1 for $1 > $2, 2 for $1 < $2
        Hamster_vercomp ${HADOOP_VERSION} "2.3.0"
        if [ $? == "2" ]
        then 
            echo "HADOOP_MODE of ${HADOOP_MODE} only supported in Hadoop 2.3.0 and more recent versions"
            exit 1
        fi

        __Hamster_check_must_be_set "HADOOP_DECOMMISSION_HDFS_NODE_SIZE" "for HADOOP_MODE = ${HADOOP_MODE}"

        if [ ! "${HADOOP_DECOMMISSION_HDFS_NODE_SIZE}" -gt "0" ]
        then
            echo "HADOOP_DECOMMISSION_HDFS_NODE_SIZE must be > 0"
            exit 1
        fi
    fi

    if [ "${HADOOP_FILESYSTEM_MODE}" != "hdfs" ] \
        && [ "${HADOOP_FILESYSTEM_MODE}" != "hdfsoverlustre" ] \
        && [ "${HADOOP_FILESYSTEM_MODE}" != "hdfsovernetworkfs" ] \
        && [ "${HADOOP_FILESYSTEM_MODE}" != "rawnetworkfs" ] \
        && [ "${HADOOP_FILESYSTEM_MODE}" != "intellustre" ] \
        && [ "${HADOOP_FILESYSTEM_MODE}" != "hamsternetworkfs" ]
    then
        echo "HADOOP_FILESYSTEM_MODE must be set to hdfs, hdfsoverlustre, hdfsovernetworkfs, rawnetworkfs, intellustre, or hamsternetworkfs"
        exit 1
    fi

    if ([ "${HADOOP_SETUP_TYPE}" == "HDFS1" ] \
        || [ "${HADOOP_SETUP_TYPE}" == "HDFS2" ]) \
        && ! Hamster_hadoop_filesystem_mode_is_hdfs_type
    then
        echo "HADOOP_FILESYSTEM_MODE must be set to hdfs, hdfsoverlustre, or hdfsovernetworkfs with HADOOP_SETUP_TYPE=${HADOOP_SETUP_TYPE}"
        exit 1
    fi

    if [ "${HAMSTER_JOB_TYPE}" == "hadoop" ] \
        && [ "${HADOOP_MODE}" == "decommissionhdfsnodes" ] \
        && ! Hamster_hadoop_filesystem_mode_is_hdfs_on_network_type
    then
        echo "HADOOP_FILESYSTEM_MODE must be set to hdfsoverlustre or hdfsovernetworkfs with HADOOP_MODE=${HADOOP_MODE}"
        exit 1
    fi

    if [ "${HAMSTER_JOB_TYPE}" == "hadoop" ] \
        && [ "${HADOOP_MODE}" == "upgradehdfs" ] \
        && ! Hamster_hadoop_filesystem_mode_is_hdfs_type
    then
        echo "HADOOP_FILESYSTEM_MODE must be set to hdfs, hdfsoverlustre, or hdfsovernetworkfs with HADOOP_MODE=${HADOOP_MODE}"
        exit 1
    fi

    if ([ "${HADOOP_FILESYSTEM_MODE}" == "intellustre" ] \
        || [ "${HADOOP_FILESYSTEM_MODE}" == "hamsternetworkfs" ]) \
        && [ "${HADOOP_SETUP_TYPE}" != "MR2" ]
    then
        echo "HADOOP_FILESYSTEM_MODE=${HADOOP_FILESYSTEM_MODE} only works with HADOOP_SETUP_TYPE = MR2"
        exit 1
    fi

    if [ "${HADOOP_FILESYSTEM_MODE}" == "hdfs" ]
    then
        __Hamster_check_must_be_set "HADOOP_HDFS_PATH" "for HADOOP_FILESYSTEM_MODE = ${HADOOP_FILESYSTEM_MODE}"

        __Hamster_check_if_set_is_yes_or_no "HADOOP_HDFS_PATH_CLEAR"
    fi

    if [ "${HADOOP_FILESYSTEM_MODE}" == "hdfsoverlustre" ]
    then
        __Hamster_check_must_be_set "HADOOP_HDFSOVERLUSTRE_PATH" "for HADOOP_FILESYSTEM_MODE = ${HADOOP_FILESYSTEM_MODE}"

        __Hamster_check_if_set_is_yes_or_no "HADOOP_HDFSOVERLUSTRE_REMOVE_LOCKS"
    fi

    if [ "${HADOOP_FILESYSTEM_MODE}" == "hdfsovernetworkfs" ]
    then
        __Hamster_check_must_be_set "HADOOP_HDFSOVERNETWORKFS_PATH" "for HADOOP_FILESYSTEM_MODE = ${HADOOP_FILESYSTEM_MODE}"

        __Hamster_check_if_set_is_yes_or_no "HADOOP_HDFSOVERNETWORKFS_REMOVE_LOCKS"
    fi

    if [ "${HADOOP_FILESYSTEM_MODE}" == "rawnetworkfs" ]
    then
        __Hamster_check_must_be_set "HADOOP_RAWNETWORKFS_PATH" "for HADOOP_FILESYSTEM_MODE = ${HADOOP_FILESYSTEM_MODE}"
    fi

    if [ "${HADOOP_LOCALSTORE}X" != "X" ]
    then
        __Hamster_check_if_set_is_yes_or_no "HADOOP_LOCALSTORE_CLEAR"
    fi

    if [ "${HADOOP_FILESYSTEM_MODE}" == "intellustre" ]
    then
        __Hamster_check_must_be_set "HADOOP_INTELLUSTRE_PATH" "for HADOOP_FILESYSTEM_MODE = ${HADOOP_FILESYSTEM_MODE}"
        
        __Hamster_check_if_set_is_yes_or_no "HADOOP_INTELLUSTRE_SHUFFLE"
    fi

    if [ "${HADOOP_FILESYSTEM_MODE}" == "hamsternetworkfs" ] \
        && [ "${HADOOP_HAMSTERNETWORKFS_PATH}X" == "X" ]
    then
        __Hamster_check_must_be_set "HADOOP_HAMSTERNETWORKFS_PATH" "for HADOOP_FILESYSTEM_MODE = ${HADOOP_FILESYSTEM_MODE}"

        firstchar=`echo ${HADOOP_HAMSTERNETWORKFS_PATH} | head -c 1`

        if [ "${firstchar}" != "/" ]
        then
            echo "HADOOP_HAMSTERNETWORKFS_PATH must be an absolute path"
            exit 1
        fi
    fi

    if Hamster_hdfs_federation_enabled
    then
        if ! Hamster_hadoop_filesystem_mode_is_hdfs_type
        then
            echo "HDFS federation can only work with an HDFS based file system, cannot work with HADOOP_FILESYSTEM_MODE = ${HADOOP_FILESYSTEM_MODE}"
            exit 1
        fi

        # Returns 0 for ==, 1 for $1 > $2, 2 for $1 < $2
        Hamster_vercomp ${HADOOP_VERSION} "2.2.0"
        if [ $? == "2" ]
        then 
            echo "HDFS Fderation only supported in Hadoop 2.2.0 and more recent versions"
            exit 1
        fi

        # Ensure user listed atleast 1 mount for each namenode
        for i in `seq 1 ${HDFS_FEDERATION_NAMENODE_COUNT}`
        do
            mountname="HDFS_FEDERATION_NAMENODE_${i}_MOUNT_1"
            eval mountvalue="\$$mountname"
            if [ "${mountvalue}X" == "X" ]
            then
                echo "HDFS federation requires at least one mount specified for each namenode, ${mountname} must be specified" 
                exit 1
            fi
        done

        # Check that all mounts are absolute paths
        for i in `seq 1 ${HDFS_FEDERATION_NAMENODE_COUNT}`
        do
            j=1
            while true;
            do
                mountname="HDFS_FEDERATION_NAMENODE_${i}_MOUNT_${j}"
                eval mountvalue="\$$mountname"
                if [ "${mountvalue}X" == "X" ]
                then
                    break;
                fi
                if [[ "${mountvalue}" != /* ]]
                then
                    echo "HDFS federation mount must be an absolute path beginning with a /"
                    exit 1
                fi
                j=`expr ${j} + 1`
            done
        done 

        nodecount=`expr ${nodecount} - ${HDFS_FEDERATION_NAMENODE_COUNT-1}`
    fi

    if [ "${HADOOP_MODE}" == "terasort" ]
    then
        __Hamster_check_if_set_is_yes_or_no "HADOOP_TERASORT_CLEAR_CACHE"
        __Hamster_check_if_set_is_yes_or_no "HADOOP_TERASORT_RUN_TERACHECKSUM"
        __Hamster_check_if_set_is_yes_or_no "HADOOP_TERASORT_RUN_TERAVALIDATE"
    fi

    __Hamster_check_if_set_is_yes_or_no "HADOOP_COMPRESSION"
    
    if Hamster_hadoop_filesystem_mode_is_hdfs_type
    then
        __Hamster_check_if_set_is_yes_or_no "HADOOP_PER_JOB_HDFS_PATH"
    fi

    if [ ${nodecount} -le "0" ]
    then
        echo "No remaining nodes for Hadoop slave nodes, increase node count or adjust node allocations"
        exit 1
    fi
fi

exit 0
