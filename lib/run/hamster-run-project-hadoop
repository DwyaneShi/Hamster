#!/bin/bash
#############################################################################
#  Copyright (C) 2016
#
#  Hamster is free software; you can redistribute it and/or modify it
#  under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  Hamster is distributed in the hope that it will be useful, but
#  WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#  General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with Hamster.  If not, see <http://www.gnu.org/licenses/>.
#############################################################################

# These are functions to be called by hamster-run

source ${HAMSTER_SCRIPTS_HOME}/lib/exports/hamster-exports-submission-type
source ${HAMSTER_SCRIPTS_HOME}/lib/exports/hamster-exports-dirs
source ${HAMSTER_SCRIPTS_HOME}/lib/exports/hamster-exports-user
source ${HAMSTER_SCRIPTS_HOME}/lib/hamster-lib-defaults
source ${HAMSTER_SCRIPTS_HOME}/lib/hamster-lib-node-identification
source ${HAMSTER_SCRIPTS_HOME}/lib/hamster-lib-hadoop-helper
source ${HAMSTER_SCRIPTS_HOME}/lib/hamster-lib-run
source ${HAMSTER_SCRIPTS_HOME}/lib/hamster-lib-paths
source ${HAMSTER_SCRIPTS_HOME}/lib/hamster-lib-helper
source ${HAMSTER_SCRIPTS_HOME}/util/hamster-io

# Return 0 if service up, 1 if not
__Hamster_run_check_hadoop_up ()
{
    cd ${HADOOP_HOME}

    ${hadoopcmdprefix}/${dfsadminscript} dfsadmin -safemode get 2>&1 | grep -q -i "off"
    if [ $? -eq 0 ]
    then
        return 0
    fi

    return 1
}

Hamster_run_start_hadoop () {
    if [ "${HADOOP_SETUP}" == "yes" ] && [ "${hamster_run_prior_startup_successful}" == "true" ]
    then
        local hdfs_was_setup=0

        cd ${HADOOP_HOME}

        if [ ${HAMSTER_JOB_TYPE} != "setuponly" ]
        then
            Hamster_echo "Starting hadoop"
            local hadoop_should_be_setup=1

            if Hamster_hadoop_filesystem_mode_is_hdfs_type
            then

                if [ "${hadoop_should_be_setup}" == "1" ]
                then
                    # Make variables unspecified for launching
                    Hamster_make_all_local_dirs_unspecified

                    ${hadoopsetupscriptprefix}/start-dfs.sh ${startdfsoptions}
                    hdfs_was_setup=1

                    # Make variables specific now within Hamster
                    Hamster_make_all_local_dirs_node_specific
                fi
            fi

            if [ "${hadoop_should_be_setup}" == "1" ]
            then
                # Make variables unspecified for shutdown
                Hamster_make_all_local_dirs_unspecified

                if Hamster_hadoop_is 1
                then
                    ${hadoopsetupscriptprefix}/start-mapred.sh
                fi

                if Hamster_hadoop_is 2
                then
                    ${hadoopsetupscriptprefix}/start-yarn.sh
                fi

                if Hamster_hadoop_is 3
                then
                    ${hadoopsetupscriptprefix}/start-yarn.sh
                fi

                # Make variables specific now within Hamster
                Hamster_make_all_local_dirs_node_specific

                # My rough estimate for setup time is 30 seconds per 128 nodes
                local sleepwait=`expr ${HADOOP_SLAVE_COUNT} \/ 128 \* 30`
                if [ ${sleepwait} -lt 30 ]
                then
                    sleepwait=30
                fi
                Hamster_echo "Waiting ${sleepwait} seconds to allows Hadoop daemons to setup"
                sleep ${sleepwait}
                hamster_run_total_sleep_wait=`expr ${hamster_run_total_sleep_wait} + ${sleepwait}`
            fi
        fi

        if Hamster_hadoop_filesystem_mode_is_hdfs_type
        then
            if [ "${hdfs_was_setup}" == "1" ]
            then
                # Return 0 if service up, 1 if not
                Hamster_check_service_up "Hadoop" "__Hamster_run_check_hadoop_up"

                if [ $? -eq 0 ]
                then
                    hamster_run_hadoop_should_be_torndown=1
                    hamster_run_hadoop_setup_successful=1
                else
                    hamster_run_hadoop_should_be_torndown=1
                    hamster_run_hadoop_setup_successful=0
                    hamster_run_prior_startup_successful=false
                fi
            else
                hamster_run_hadoop_should_be_torndown=0
                hamster_run_hadoop_setup_successful=0
                hamster_run_prior_startup_successful=false
            fi
        else
            hamster_run_hadoop_should_be_torndown=1
            hamster_run_hadoop_setup_successful=1
        fi

        # Setup job history server after namenode comes up, it may need to
        # write/create in HDFS
        if [ "${hamster_run_hadoop_setup_successful}" == "1" ]
        then
            if Hamster_hadoop_is 1
            then
                ${hadoopsetupscriptprefix}/start-jobhistoryserver.sh
            elif Hamster_hadoop_is 2
            then
                ${hadoopsetupscriptprefix}/mr-jobhistory-daemon.sh start historyserver
            elif Hamster_hadoop_is 3
            then
                ${hadoopcmdprefix}/mapred envvars
                ${hadoopcmdprefix}/mapred --daemon start historyserver
            fi
        fi

        # A number of applications assume the user home directory has been
        # created.  If it hasn't yet, lets create it for the user.
        if [ "${hamster_run_hadoop_setup_successful}" == "1" ]
        then
            if Hamster_hadoop_filesystem_mode_is_hdfs_type
            then
                ${hadoopcmdprefix}/hadoop fs -ls "/user/${USER}" >& /dev/null
                if [ $? -ne 0 ]
                then
                    Hamster_echo "User home directory /user/${USER} not found, creating it"
                    ${hadoopcmdprefix}/hadoop fs -mkdir -p "/user/${USER}"
                fi
            fi
        fi
    else
        hamster_run_hadoop_should_be_torndown=0
        hamster_run_hadoop_setup_successful=1
    fi
}

Hamster_run_hadoop () {
    if [ "${HAMSTER_JOB_TYPE}" == "script" ]
    then
        Hamster_echo "*******************************************************"
        Hamster_echo "* Executing script $HADOOP_SCRIPT_PATH $HADOOP_SCRIPT_ARGS"
        Hamster_echo "*******************************************************"
        ${HAMSTER_SCRIPTS_HOME}/lib/run/hamster-run-execute script ${HADOOP_SCRIPT_PATH} ${HADOOP_SCRIPT_ARGS} &
        local scriptpid=$!
        Hamster_wait_script_sigusr2_on_job_timeout ${scriptpid}
    elif [ "${HAMSTER_JOB_TYPE}" == "interactive" ]
    then
        Hamster_echo "*******************************************************"
        Hamster_echo "* Entering Hadoop ${HAMSTER_JOB_TYPE} mode"
        Hamster_echo "*******************************************************"
        ${HAMSTER_SCRIPTS_HOME}/lib/run/hamster-run-execute interactive &
        local scriptpid=$!
        wait $scriptpid
    elif [ "${HAMSTER_JOB_TYPE}" == "hadoop" ]
    then
        Hamster_echo "*******************************************************"
        Hamster_echo "* Entering Hadoop ${HAMSTER_JOB_TYPE} mode"
        Hamster_echo "*******************************************************"
        ${HAMSTER_SCRIPTS_HOME}/lib/run/hamster-run-execute launch &
        local scriptpid=$!
        wait $scriptpid
    else
        Hamster_output_internal_error "HAMSTER_JOB_TYPE = ${HAMSTER_JOB_TYPE} not handled"
    fi
}

Hamster_run_stop_hadoop () {
    if [ "${HADOOP_SETUP}" == "yes" ] && [ "${hamster_run_hadoop_should_be_torndown}" == "1" ]
    then
        cd ${HADOOP_HOME}

        Hamster_echo "Stopping hadoop"

        # Make variables unspecified for shutdown
        Hamster_make_all_local_dirs_unspecified

        if Hamster_hadoop_is 1
        then
            ${hadoopsetupscriptprefix}/stop-mapred.sh
            ${hadoopsetupscriptprefix}/stop-jobhistoryserver.sh
        elif Hamster_hadoop_is 2
        then
            ${hadoopsetupscriptprefix}/stop-yarn.sh
            ${hadoopsetupscriptprefix}/mr-jobhistory-daemon.sh stop historyserver
        elif Hamster_hadoop_is 3
        then
            ${hadoopsetupscriptprefix}/stop-yarn.sh
            ${hadoopcmdprefix}/mapred --daemon stop historyserver
        fi

        # Make variables specific now within Hamster
        Hamster_make_all_local_dirs_node_specific

        if Hamster_hadoop_filesystem_mode_is_hdfs_type
        then
            if [ "${hamster_run_hadoop_setup_successful}" == "1" ]
            then
                Hamster_echo "Saving namespace before shutting down hdfs ..."

                command="${hadoopcmdprefix}/${dfsadminscript} dfsadmin -safemode enter"
                echo "Running $command" >&2
                $command

                command="${hadoopcmdprefix}/${dfsadminscript} dfsadmin -saveNamespace"
                echo "Running $command" >&2
                $command

                command="${hadoopcmdprefix}/${dfsadminscript} dfsadmin -safemode leave"
                echo "Running $command" >&2
                $command
            fi

            # Make variables unspecified for shutdown
            Hamster_make_all_local_dirs_unspecified

            ${hadoopsetupscriptprefix}/stop-dfs.sh

            # Make variables specific now within Hamster
            Hamster_make_all_local_dirs_node_specific
        fi
    fi
    hamster_run_hadoop_teardown_complete=1
}
